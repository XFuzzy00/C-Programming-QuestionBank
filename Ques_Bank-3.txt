Ques 1. Explain Array with real time example.
Ans. An array is a collection of homogeneous data (similar type of data) in a contiguous memory location.
Example : int array[10]; //an integer type array with space for 10 elements.


Ques 2. Write down the advantages of array.
Ans. Below are some advantages of the array:
	i) In an array, accessing an element is very easy by using the index number.
	ii) The search process can be applied to an array easily.
	iii) 2D Array is used to represent matrices.
	iv) For any reason a user wishes to store multiple values of similar type then the Array can be used and utilized efficiently.

	
Ques 3. Explain disadvantages of array over dynamic memory allocation.
Ans. Below are some disadvantages of the array:
	i) Array size is fixed.
	ii) Holds only one type of data.
	iii) Insertion and deletion of data is not easy in Array.
	

Ques 4. Explain types of arrays.
Ans. 
	i) Single Dimensional Array (1-D Array) : Single dimensional arrays are used to store list of values of same datatype. In 1-D arrays, data is stored in linear form.
Syntax : datatype arrayName[size];
Example : int data[10];

	ii) Multi Dimensional Array (2-D Array) : The 2-D arrays are used to store data in the form of table. We also use 2-D arrays to create mathematical matrices.
Syntax : datatype arrayName[rowSize][columnSize];
Example : int data[2][3];


Ques 5. Explain one dimensional array with declaration, compile time initialization and run time initialization.
Ans. 
	i) Compile Time : 
	## Source Code ##
	
	#include <stdio.h>

	int main(){
		int array[5] = {1, 2, 3, 4, 5}; // declaring and initializing an array at the same time

		for (int i = 0; i < 5; i++){
		        printf("%d\n", array[i]);
		}
	}
	
	ii) Run Time : 
	## Source Code ##
	
	#include <stdio.h>

	int main(){
		int array[5]; //declaring an array

		for (int i = 0; i < 5; i++){
		        printf("Enter array element : ");
		        scanf("%d", &array[i]); //assigning values on run time
		}

		printf("Entered array elements are : ");

		for (int i = 0; i < 5; i++){
		        printf("%d\n", array[i]);
		}
	}


Ques 6. Explined in question 4.


Ques 7. Explain row-major and column-major arrangement with example.
Ans. 
	i) Row-Major : In row major order, the elements of a particular row are stored at adjacent memory locations. The first element of the array (arr[0][0]) is stored at the first location followed by the arr[0][1] and so on. After the first row, elements of the next row are stored next.

	arr[3][3] =
	[ a00, a01, a02 ]
	[ b10, b11, b12 ]
	[ c20, c21, c22 ]

	Row major order = a00, a01, a02, b10, b11, b12, c20, c12, c22
	
	
	ii) Column-Major : In column major order, the elements of a column are stored adjacent to each other in the memory.The first element of the array (arr[0][0]) is stored at the first location followed by the arr[1][0] and so on. After the first column, elements of the next column are stored stating from the top.

	arr[3][3] =
	[ a00, a01, a02 ]
	[ b10, b11, b12 ]
	[ c20, c21, c22 ]

	Column major order = a00, b10, c20, a01, b11, c21, a02, b12, c22
	

Ques 8. Explained in question 4.


Ques 9. Write a program to create an array as per given range by the user and display it.
Ans. ## Source Code ##


	#include <stdio.h>
	#define MAX_RANGE 20


	int main(){
		int range;
		int array[MAX_RANGE];

		printf("Enter the range of array (MAX : 20) : ");
		scanf("%d", &range);

		for (int i = 1; i < range+1; i++){
		        printf("Enter element number %d out of %d : ", i, range);
		        scanf("%d", &array[i]);
		}

		printf("Array elements are : ");

		for (int i = 1; i < range+1; i++){
		        printf("\n%d. %d", i, array[i]);
		}
	}


Ques 10. Write a program to find maximum and minimum value from one dimensional array.
Ans. ## Source Code ##

	#include <stdio.h>

	int main(){
		int array[5] = {8, 2, 5, 1, 9};
		int max = array[0], min = array[0];

		for (int i = 0; i < 5; i++){
		        if (array[i] > max){
		                max = array[i];
		        }

		        if (array[i] < min){
		                min = array[i];
		        }
		}

		printf("Max : %d\nMin : %d", max, min);
	}
	
	
Ques 11. Write a program to find the sum and average of all the element of an array.

Ans.	#include <stdio.h>

	int main(){
		int sum = 0;
		float avg = 0;
		int array[5] = {1, 2, 3, 4, 5};

		for (int i = 0; i < 5; i++){
		        sum += array[i];
		}

		printf("Sum : %d\nFloat : %2.2f", sum, sum/5.0);
	}


Ques 12. Write a program to sort an array in ascending order.

Ans.	#include <stdio.h>

	int main(){
		int array[5] = {5, 9, 1, 4, 6};
		int temp;

		for (int i = 0; i < 5; i++){
		        for (int j = 0; j < 5 - i - 1; j++){
		                if (array[j] > array[j+1]){
		                        temp = array[j];
		                        array[j] = array[j+1];
		                        array[j+1] = temp;
		                }
		        }
		}

		printf("Array after sorting : ");

		for (int i = 0; i < 5; i++){
		        printf("%d ", array[i]);
		}
	}


Ques 13. Write a program to search an element in given array.

Ans. 	#include <stdio.h>

	int main(){
		int array[5] = {1, 2, 3, 4, 5};
		int element;

		printf("Enter an element to search : ");
		scanf("%d", &element);

		for (int i = 0; i < 5; i++){
		        if (element == array[i]){
		                printf("Found at position : %d", i+1);
		        }
		}
	}
	

Ques 14. What happens when an array with a specified size is assigned?
	a. With values fewer than the specified size, and
	b. With values more than specified size.

Ans.	a) The remianing spaces remain empty and can be assigned values at any time.
	b) If you try to initialize more values than the specified size than the program will give an error "excess elements in array initializer".
	
	
Ques 15. Write a program to count the even and odd numbers in an array.

Ans.	#include <stdio.h>

	int main(){
		int array[5] = {2, 3, 4, 5, 6};
		int even = 0, odd = 0;

		for (int i = 0; i < 5; i++){
		        if (array[i] % 2 == 0){
		                even += 1;
		        } else {
		                odd += 1;
		        }
		}
		printf("Even are : %d\nOdd are : %d", even, odd);
	}


Ques 16. Write a program to count negative, positive and zero in an array.
Ans. Same concept as question 15.


Ques 17. Explain how to pass individual array elements to an array.

Ans.	#include <stdio.h>

	int main(){
		int array[5]; //declaring an array

		for (int i = 0; i < 5; i++){
		        printf("Enter array element : ");
		        scanf("%d", &array[i]); //assigning values on run time
		}
	}
	
	Can utilize for loop to individually assign values to every index of the array.
	

Ques 18. Explain how to pass 1-D array to a function.

Ans. Syntax : datatype functionName(datatype arrayName[], additionalParameters...){
	
	      }
Exapmle : void fn(int arr[], int n){
		statements...
	  }
	 
	 
Ques 19. Write a program to take input from user in 2-D array and display it in matrix form.

Ans.	#include <stdio.h>

	int main(){
		int matrix[2][2];

		printf("Enter 4 elements : ");

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                scanf("%d", &matrix[i][j]);
		        }
		}

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                printf("%d.\t", matrix[i][j]);
		        }
		        printf("\n");
		}
	}


Ques 20. Write a program for addition of two matrix and display.
Ques 21. Write a program for subtraction of two matrix and display.

Ans 20 & Ans 21 : 

	#include <stdio.h>

	int main(){
		int matrixA[2][2] = {{1, 2}, {6, 7}};
		int matrixB[2][2] = {{9, 8}, {4, 5}};
		int sum[2][2];
		int sub[2][2];

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                sum[i][j] = matrixA[i][j] + matrixB[i][j];
		                sub[i][j] = matrixB[i][j] - matrixA[i][j];
		        }
		}

		printf("Addition : \n");

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                printf("%d.\t", sum[i][j]);
		        }
		        printf("\n");
		}

		printf("\nSubtraction : \n");

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                printf("%d.\t", sub[i][j]);
		        }
		        printf("\n");
		}
	}
	
	
Ques 22. Write a program for multiplication of two matrix and display.

Ans. 	#include <stdio.h>

	int main(){
		int matrixA[2][3] = {{1, 2, 3}, {6, 7, 8}};
		int matrixB[3][2] = {{9, 8}, {4, 5}, {4, 9}};
		int mul[2][2];

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                mul[i][j] = 0;
		                for (int k = 0; k < 3; k++){
		                        mul[i][j] += matrixA[i][k] * matrixB[k][j];
		                }
		        printf("%d\t", mul[i][j]);
		        }
		        printf("\n");
		}
	}



Ques 23. Write a program to find the transpose of a given matrix.

Ans.	#include <stdio.h>

	int main(){
		int matrix[2][3] = {{1, 2, 3}, {9, 8, 7}};
		int transpose[3][2];

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 3; j++){
		                transpose[j][i] = matrix[i][j];
		        }
		}

		for (int i = 0; i < 3; i++){
		        for (int j = 0; j < 2; j++){
		                printf("%d\t", transpose[i][j]);
		        }
		        printf("\n");
		}
	}
	
	
Ques 24. Explain arrays with more than two dimensions.
Ans. You can create arrays with more than tow dimensions such as 3-D arrays.
	Syntax : datatype arrayName[size][size][size];
	Example : int plane[3][3][4];
	
	
Ques 25. Write a program to count the occurrence of a number in a matrix.

Ans.	#include <stdio.h>

	int main(){
		int num, count = 0;
		int matrix[2][2] = {{1, 2}, {4, 2}};

		printf("Enter number to search : ");
		scanf("%d", &num);

		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                if (matrix[i][j] == num){
		                        count += 1;
		                }
		        }
		}
		printf("Number occured %d times.", count);
	}
	

Ques 26. Write a program to store all the element of a 2-D array in a 1-D array row-wise.

Ans. 	#include <stdio.h>

	int main(){
		int matrix[2][2] = {{1, 2}, {9, 8}};
		int array[4], k = 0;

		for (int i = 0; i < 4; i++){
		        for (int j = 0; j < 2; j++){
		                k = j + (i * 2);
		                array[k] = matrix[i][j];
		                k++;
		        }
		}

		printf("Array is : \n");
		for (int i = 0; i < 4; i++){
		        printf("%d\n", array[i]);
		}
	}
	
	*NOTE : Use algorithm k = j + (i * total_no_of_columns_in_matrix)
	

Ques 27. Define function and concept of reusability.
Ans. A function is a block of organized, reusable code that is used to perform a single, related action.

	Concept of reusability : 
	i) The reusability of a code hinges on the ability of other programmers to be able to look at the code and understand it and its properties.
	ii) Reusability is the quality of a code being used in different platforms for multiple functions.
	iii) For reusability to work, a known method is known as modularization, wherein a code is broken into modules.
	

Ques 28. How many types of function and explain with example?
Ans. 
	i) Function with no argument and no Return value : 
	
	void sum(){
		int i = 1;
		printf("%d", i);
	}
	
	ii) Function with no argument and with a Return value : 
	
	int sum(){
		int i = 1 + 2;
		return i;
	}
	
	iii) Function with argument and No Return value : 
	
	void sum(int a, int b){
		printf(Sum is : "%d", a + b);
	}
	
	iv) Function with argument and Return value : 
	
	int sum(int a, int b){
		int add = a + b;
		return add;
	}
	

Ques 29. What are the advantages of using function ?
Ans. 
	i) Increase readability of the program.
	ii) Execution and control flow of the program can be easily mananged.
	iii) Reduces the complexity of the program and gives it a modular structure.
	iv) A function can be used to create a header file which can be used in any number of programs.
	

Ques 30. Explain function definition, function declaration and function call.

Ans. 	#include <stdio.h>

	// function definiton
	int sum(int, int);

	int main(){
		int x, y;

		printf("Enter two numbers : ");
		scanf("%d %d", &x, &y);

		printf("Sum is : %d", sum(x, y)); // function call

	}

	// function declaration
	int sum(int a, int b){
		int result = a + b;
		return result;
	}


Ques 31. Distinguish local variable and global variable.
Ans. 	#include <stdio.h>
	#define MAX 20	// Global variable
	
	int main(){
		int a, b;	// Local variables
	}
	
	i) Local variable : Local Variable is defined as a type of variable declared within programming block or subroutines. It can only be used inside the subroutine or code block in which it is declared.
	
	ii) Global variables : A Global Variable in the program is a variable defined outside the subroutine or function. It has a global scope means it holds its value throughout the lifetime of the program.
	

Ques 32. Distinguish local scope and global scope.
Ans. Same concept as question 31. 
Visit this site (https://www.freecodecamp.org/news/scope-of-variables-in-c-local-and-global-scope-explained/).


Ques 33. What is the role of actual argument and formal argument ?
Ans. 
	i) Actual argumnets : We use actual arguments while calling a function.
	ii) Formal arguments : Used during declaration or definition of a function.
	
	For more info (https://overiq.com/c-programming-101/actual-and-formal-arguments-in-c/)
	

Ques 34. Categorized the function on the basis of arguments and return values.
	a. Functions with no arguments and no return values
	b. Functions with no arguments and a return value.
	c. Functions with arguments and no return value.
	d. Functions with arguments and a return value.
	e. Function returns multiple value.
	
Ans. Part a, b, c, d explained in question 28.

	e) Ways to return multiple values using a function are:
		- using pointers.
		- using structures.
		- using arrays.
		
	For detailed explanation (https://www.geeksforgeeks.org/how-to-return-multiple-values-from-a-function-in-c-or-cpp/)
	

Ques 35. Differentiate between call by value and call by reference using an example.

Ans. Too lazy to write anything here so here is a link :)
	(https://www.geeksforgeeks.org/difference-between-call-by-value-and-call-by-reference/)


Ques 36. Define recursion with proper example.
Ans. Recursion : The process in which a function calls itself directly or indirectly is called recursion.

	## Source Code ##
	
	// Program to find factorial of a number using recursion.
	
	#include <stdio.h>

	int fact(int num){
		if (num == 0)
		return 1;
		else
		return num * fact(num-1);
	}

	int main(){
		int num;

		printf("Enter a number : ");
		scanf("%d", &num);

		printf("Factorial of %d is : %d", num, fact(num));
	}
	
	
Ques 37. Write a program to find the factorial of a given number using function.
Ans. Same code as in question 36.


Ques 38. Write a program to find given number is prime or not using function.

Ans.	#include <stdio.h>

	int isPrime(int num){
		if (num <= 1){
		        return 1;
		}

		for (int i = 2; i < num / 2; i++){
		        if (num % i == 0){
		                return 0;
		        }
		}
		return 1;
	}

	int main(){
		int num;

		printf("Enter a number : ");
		scanf("%d", &num);

		if (isPrime(num)){
		        printf("%d is prime.", num);
		} else {
		        printf("%d is not prime.", num);
		}
	}
	
	For explanation (https://www.geeksforgeeks.org/prime-numbers/)
	

Ques 39. Write a program to find the reverse of a given number using function.

Ans. 	#include <stdio.h>

	int reverse(int num){
		int rev = 0, r;

		while (num ! = 0){
		        r = num % 10;
		        rev = rev * 10 + r;
		        num / = 10;
		}

		return rev;
	}

	int main(){
		int num;

		printf("Enter a number : ");
		scanf("%d", &num);

		printf("Reverse of %d is %d", num, reverse(num));
	}
	
Ques 40. Write a program to print all the prime number less than 500 using function.

Ans. 	#include <stdio.h>

	int primeNum(int num){
		for (int i = 2; i < num / 2; i++){
		        if (num % i == 0){
		                return 0;
		        }
		}
		return 1;
	}

	int main(){
		int num = 500;

		for (int i = 2; i <= num; i++){
		        if (primeNum(i)){
		                printf("%d\t", i);
		        }
		}
	}
	
	
Ques 41. Write a program to find the factorial of a number by recursive method.
Ans. Same code as question 36.


Ques 42. Write a program to print Fibonacci series by recursive method.

Ans. 	#include <stdio.h>

	int fib(int last){
		if (last == 0)
		return 0;
		if (last == 1)
		return 1;
		else
		return fib(last - 1) + fib(last - 2);
	}

	int main(){
		int last;

		printf("Enter the number : ");
		scanf("%d", &last);

		for (int i = 0; i < last; i++){
		        printf("%d\t", fib(i));
		}
	}
	
	
Ques 43. Explain advantages and disadvantages of recursion.
Ans. 
	- Disadvantages : 
		i) Greater space requirements.
		ii) Greater time requirements.
	-Advantages : 
		i) Code is simpler and shorter than a iterative code.
		ii) Some problems are inherently recursive, such as Graph and Tree Traversal.
	
	For more explanation (https://www.educative.io/courses/recursion-for-coding-interviews-in-cpp/qAx1lwQYDNG)
	
	

Ques 44. What is prototyping? Why is it necessary?
Ans. A prototype refers to a sapmle or maodel of a program and the way to represent that code snippet is called prototyping.


Ques 45. Theoretical question.
Ques 46. Another theoretical question.


Ques 47. Develop a modular interactive program using functions that reads the values of three sides of a
triangle and displays either its area or its perimeter as per the request of the user. Given the
three sides a, b and c
	Perimeter = a + b + c
	Area=√s * (s − a)(s − b)(s − c)
	Where s= (a + b + c)/2
	
Ans. 	#include <stdio.h>
	#include <math.h>

	int prm(int, int, int);
	float area(int, int, int);

	int main(){
		int a, b, c, input;

		printf("Enter the three sides : ");
		scanf("%d %d %d", &a, &b, &c);

		printf("\nWhat to calculate : ");
		printf("\n1. Perimeter\n2. Area");
		printf("\n-->");
		scanf("%d", &input);

		switch(input){
		case 1:
		        printf("Perimeter is : %d", prm(a, b, c));
		        break;
		case 2:
		        printf("Area is : %2.2f", area(a, b, c));
		        break;
		}

	}


	int prm (int a, int b, int c){
		return a + b + c;
	}

	float area (int a, int b, int c){
		float s = (a + b + c) / 2.0;
		printf("%2.2f", s);

		float area = (float) sqrt(s * ((s-a) * (s-b) * (s-c)));

		return area;
	}
	
	
Ques 48. Write a function that can be called to find the largest element of an m by n matrix.

Ans. 	#include <stdio.h>

	int findMax(int matrix[2][2]){
		int max = 0;
		for (int i = 0; i < 2; i++){
		        for (int j = 0; j < 2; j++){
		                if (matrix[i][j] > max){
		                        max = matrix[i][j];
		                }
		        }
		}
		return max;
	}

	int main(){
		int matrix[2][2] = {{2, 6}, {9, 8}};
		int max = findMax(matrix);

		printf("Largest element is : %d", max);
	}
	

Ques 50. Write a program to print pascal’s triangle
	1
	1	1
	1	2	1
	1	3	3	1
	1	4	6	4	1
	
Ans. 	https://www.geeksforgeeks.org/pascal-triangle/

	Difficult AF. :(
